#!perl

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Getopt::Compact::WithCmd;
use lib qw/lib extlib/;

use WAFLWAFL::Simple qw/proc/;

my $go = Getopt::Compact::WithCmd->new(
    name          => 'wafl',
    version       => '0.1',
    args          => 'Table',
    global_struct => [],
    command_struct => {
        run => {
            options    => [
                [ [qw/c conf/], 'config file path', '=s', undef, { default => 'wafl.pl' } ],
            ],
            desc => 'generate waf template',
        },
        oneliner => {
            options    => [
                [
                    [qw/m module/], 'orm module name', '=s', undef, { required => 1 },
                    [qw/c class/],  'schema class',    '=s', undef, { required => 1 },
                    [qw/t tmpl/],   'template',        '=s', undef, { required => 1 },
                ],
            ],
            desc => 'generate waf template (oneliner)',
        },
    },
);

my $opts = $go->opts;
my $cmd  = $go->command;

if (!$cmd) {
    print $go->show_usage, "\n";
} elsif ($cmd eq 'run') {
    my $table = shift @ARGV;
    my $conf_file = $opts->{conf};
    my $conf = do $conf_file or die "Cannot load configuration file: $conf_file";
    proc(
        $conf->{module},
        $conf->{class},
        $conf->{tmpl},
        $table,
    );
} elsif ($cmd eq 'oneliner') {
    my $table = shift @ARGV;
    proc(
        $opts->{module},
        $opts->{class},
        $opts->{tmpl},
        $table,
    );
}

exit;

__END__

=head1 NAME

wafl-simple - WAFLWAFL Simple

=head1 USAGE

wafl-simple COMMAND [OPTION] Table

wafl-simple --module='Skinny' --class='Skinny::Sample::DB' --tmpl='<: $column :>,' emp

=head1 COMMAND

=over

=item run

generate waf template

=item oneliner

generate waf template (oneliner)

=back

=head1 OPTIONS

=over 4

=item --module

WAFLWAFL::ORM::XXXXX (Skinny / DBIC ...)

=item --class

OR/Mapper Schema Class

=item --table

table (Schema) name

=item --tmpl

Templates for each column (default -> <: $column :>, )

=item --conf

config file

  example.
  +{
      module     => 'Skinny',
      class      => 'Skinny::Sample::DB',
      tmpl       => '<: $column :>,',
  };

=item  --help

help

=back

=head1 Template Examples

=over 4

=item Sample Schema

  CREATE TABLE DEPT
  (
    deptno number(2),
    dname varchar2(14),
    loc varchar2(13),
    constraint pk_dept primary key(deptno)
  );

=item Simple

template

  tmpl => '<: $column :>,',

result.

  deptno,dname,loc,

=item SQL Bind Uptdate

template

  tmpl => '<: $column :>=?,' . "\n",

result.

  deptno=?,
  dname=?,
  loc=?,

=item SQL Bind Where

template

  tmpl => '<: $column :>=? and' . "\n",

result.

  deptno=? and
  dname=? and
  loc=? and

=item Lexical var 1

template

  tmpl => 'my $<: $column :> = shift;' . "\n",

result.

  my $deptno = shift;
  my $dname = shift;
  my $loc = shift;

=item Lexical var2 (hash?)

template

  tmpl => '<: $column :> => $c->req->param("<: $column :>"),' . "\n",

result.

  deptno => $c->req->param("deptno"),
  dname => $c->req->param("dname"),
  loc => $c->req->param("loc"),

=item Getter / Setter

template

    tmpl => q|
sub <: $column :> {
    my $self = shift;
    if(@_) {
        $self->{<: $column :>} = $_[0];
    }
    return $self->{<: $column :>};
}
|,

result.

  sub deptno {
      my $self = shift;
      if(@_) {
          $self->{deptno} = $_[0];
      }
      return $self->{deptno};
  }

  sub dname {
      my $self = shift;
      if(@_) {
          $self->{dname} = $_[0];
      }
      return $self->{dname};
  }

  sub loc {
      my $self = shift;
      if(@_) {
          $self->{loc} = $_[0];
      }
      return $self->{loc};
  }

=back

=cut

